<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sb"><!-- namespace: 클래스명과동일 -->
	
	<!-- 품목리스트 행 개수 -->
	<select id ="getPCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM ITEM I INNER JOIN ITEM_PRICE IP
     ON I.ITEM_NO = IP.ITEM_NO
    WHERE 1=1
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	</select>
	
	<!-- 품목리스트 -->
	<select id ="getPList" parameterType="hashmap" resultType="hashmap">
	SELECT ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT
	FROM(
		SELECT ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT,ROW_NUMBER() OVER(ORDER BY ITEM_NO DESC) AS RNK
        FROM(
        SELECT I.ITEM_NO,I.CATE_NO,I.ITEM_NAME,IP.PRICE,I.MIN_ORD_UNIT,ROW_NUMBER() OVER(partition by I.ITEM_NO ORDER BY IP.ENROLL_DATE DESC) AS RNK
		FROM ITEM I INNER JOIN ITEM_PRICE IP
    	 ON I.ITEM_NO = IP.ITEM_NO
    	 AND I.DEL_FLAG = 1)
         WHERE RNK = 1
   		 <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
    	 )A 
	WHERE A.RNK BETWEEN  #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 품목 상세보기 -->
	<select id = "getPDetail" parameterType="hashmap" resultType="hashmap">
	SELECT ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT,COM_PROD_FLAG
	FROM(
	SELECT I.ITEM_NO,I.CATE_NO,I.ITEM_NAME,IP.PRICE,I.MIN_ORD_UNIT,I.COM_PROD_FLAG,ROW_NUMBER() OVER(ORDER BY IP.ENROLL_DATE DESC) AS RNK
			FROM ITEM I INNER JOIN ITEM_PRICE IP
    		 ON I.ITEM_NO = IP.ITEM_NO
			AND I.ITEM_NO = #{itemNo}) A
	WHERE A.RNK = 1  
	</select>
	
	<!-- 품목 상세보기 내 가격 히스토리  -->
	<select id ="getPHList" parameterType="hashmap" resultType="hashmap">
	SELECT NI.ITEM_NO, NVL(OI.PRICE, 0) AS OLD_PRICE, NI.PRICE AS NEW_PRICE,NI.ID,TO_CHAR(NI.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM (SELECT IP.ITEM_NO, ROW_NUMBER() OVER(ORDER BY IP.PRICE_NO ASC) AS RNUM, IP.PRICE,HU.ID,IP.ENROLL_DATE
    	  FROM ITEM_PRICE IP INNER JOIN HQ_USER HU
       	  ON IP.USER_NO = HU.USER_NO
    	  WHERE IP.ITEM_NO = #{itemNo}) OI RIGHT OUTER JOIN (SELECT IP.ITEM_NO, IP.PRICE_NO, ROW_NUMBER() OVER(ORDER BY IP.PRICE_NO ASC) AS RNUM, IP.PRICE,HU.ID,IP.ENROLL_DATE
                                             FROM ITEM_PRICE IP INNER JOIN HQ_USER HU
                                             ON IP.USER_NO = HU.USER_NO
                                              WHERE IP.ITEM_NO = #{itemNo}) NI
                                   ON OI.RNUM = NI.RNUM - 1
	ORDER BY PRICE_NO DESC
	</select>
	
	<!-- 품목추가 --><!-- 사용자 번호는 로그인된  대상으로 수정 필요  및 현재 시퀀스는 테스트용으로 만든 시퀀스로 쓴 것이므로 나중에 진짜 시퀀스로 바꿔야함-->
	<insert id="AddItem" parameterType="hashmap">	
	INSERT INTO ITEM VALUES (TEST_SEQ.NEXTVAL,#{itemCate},4,#{itemName},#{itemMinOrdUnit},SYSDATE,#{itemComProdFlag})
	</insert>
	<insert id="AddItemPrice" parameterType="hashmap">	
	INSERT INTO ITEM_PRICE VALUES (TEST_SEQ2.NEXTVAL,TEST_SEQ.CURRVAL,4,#{itemPrice},SYSDATE)
	</insert>
	
	<!-- 품목수정 -->
	<update id="EditItem" parameterType="hashmap">
	UPDATE ITEM SET CATE_NO = #{itemCate},ITEM_NAME = #{itemName}, MIN_ORD_UNIT = #{itemMinOrdUnit}, COM_PROD_FLAG = #{itemComProdFlag}
	WHERE ITEM_NO = #{itemNo}
	</update>
	<!-- 수정 시 가격변동이 있는 경우 품목_가격 테이블에 해당 이력(변경가격) 추가 --><!-- 테스트 시퀀스로 시퀀스 변경 필요 -->
	<insert id="EditItemPrice" parameterType="hashmap">	
	INSERT INTO ITEM_PRICE VALUES (TEST_SEQ2.NEXTVAL,#{itemNo},4,#{itemPrice},SYSDATE)
	</insert>
	
	<!-- 품목 삭제  / 삭제여부 변경-->
	<update id="DelItem" parameterType="hashmap">
	UPDATE ITEM SET DEL_FLAG = 0 WHERE ITEM_NO = #{itemNo}
	</update>
</mapper> 
