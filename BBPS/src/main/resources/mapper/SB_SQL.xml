<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sb"><!-- namespace: 클래스명과동일 -->
	
	<select id = "getauthCnt" parameterType="hashmap" resultType="Integer">
	SELECT AUTH_CODE
    FROM SITE_MENU_AUTH SMA INNER JOIN HQ_USER HU
                            ON SMA.AUTH_NO = HU.AUTH_NO
    WHERE HU.USER_NO = #{uNo}
    AND SMA.SITE_MENU_NO = #{menuNo}
	</select>
	
	<!-- 아이템 카테고리 불러오기 -->
	<select id = "getCateList" resultType="hashmap">
	SELECT CATE_NO,CATE_NAME
	FROM ITEM_CATE
	WHERE DEL_FLAG = 1
	</select>
	
	<!-- 품목리스트 행 개수 -->
	<select id ="getPCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(DISTINCT I.ITEM_NO)
	FROM ITEM I INNER JOIN ITEM_PRICE IP
     ON I.ITEM_NO = IP.ITEM_NO
    AND I.DEL_FLAG = 1
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  CATE_NO = #{cate}
	</if>
	</select>
	
	<!-- 품목리스트 -->
	<select id ="getPList" parameterType="hashmap" resultType="hashmap">
	SELECT CATE_NAME,ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT
	FROM(
		SELECT CATE_NAME,ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT,ROW_NUMBER() OVER(ORDER BY ITEM_NO DESC) AS RNK
        FROM(
        SELECT IC.CATE_NAME,I.ITEM_NO,I.CATE_NO,I.ITEM_NAME,IP.PRICE,I.MIN_ORD_UNIT,ROW_NUMBER() OVER(partition by I.ITEM_NO ORDER BY IP.ENROLL_DATE DESC) AS RNK
		FROM ITEM I INNER JOIN ITEM_PRICE IP
    	 ON I.ITEM_NO = IP.ITEM_NO
    	 AND I.DEL_FLAG = 1
    	 INNER JOIN ITEM_CATE IC
    	 ON I.CATE_NO = IC.CATE_NO)
         WHERE RNK = 1
   		 <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
		</if>
		<if test = "cate != null and cate != ''">
			AND  CATE_NO = #{cate}
	</if>
    	 )A 
	WHERE A.RNK BETWEEN  #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 품목 상세보기 -->
	<select id = "getPDetail" parameterType="hashmap" resultType="hashmap">
	SELECT ITEM_NO,CATE_NAME,ITEM_NAME,PRICE,MIN_ORD_UNIT,COM_PROD_FLAG
	FROM(
	SELECT I.ITEM_NO,IC.CATE_NAME,I.ITEM_NAME,IP.PRICE,I.MIN_ORD_UNIT,I.COM_PROD_FLAG,ROW_NUMBER() OVER(ORDER BY IP.ENROLL_DATE DESC) AS RNK
			FROM ITEM I INNER JOIN ITEM_PRICE IP
    		 ON I.ITEM_NO = IP.ITEM_NO
			AND I.ITEM_NO = #{itemNo}
            INNER JOIN ITEM_CATE IC
            ON I.CATE_NO = IC.CATE_NO) A
	WHERE A.RNK = 1  
	</select>
	
	<!-- 품목 상세보기 내 가격 히스토리  -->
	<select id ="getPHList" parameterType="hashmap" resultType="hashmap">
	SELECT NI.ITEM_NO, NVL(OI.PRICE, 0) AS OLD_PRICE, NI.PRICE AS NEW_PRICE,NI.ID,TO_CHAR(NI.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM (SELECT IP.ITEM_NO, ROW_NUMBER() OVER(ORDER BY IP.PRICE_NO ASC) AS RNUM, IP.PRICE,HU.ID,IP.ENROLL_DATE
    	  FROM ITEM_PRICE IP INNER JOIN HQ_USER HU
       	  ON IP.USER_NO = HU.USER_NO
    	  WHERE IP.ITEM_NO = #{itemNo}) OI RIGHT OUTER JOIN (SELECT IP.ITEM_NO, IP.PRICE_NO, ROW_NUMBER() OVER(ORDER BY IP.PRICE_NO ASC) AS RNUM, IP.PRICE,HU.ID,IP.ENROLL_DATE
                                             FROM ITEM_PRICE IP INNER JOIN HQ_USER HU
                                             ON IP.USER_NO = HU.USER_NO
                                              WHERE IP.ITEM_NO = #{itemNo}) NI
                                   ON OI.RNUM = NI.RNUM - 1
	ORDER BY PRICE_NO DESC
	</select>
	
	<!-- 품목추가 --><!-- 사용자 번호는 로그인된  대상으로 수정 필요  및 현재 시퀀스는 테스트용으로 만든 시퀀스로 쓴 것이므로 나중에 진짜 시퀀스로 바꿔야함-->
	<insert id="AddItem" parameterType="hashmap">	
	INSERT INTO ITEM VALUES (ITEM_SEQ.NEXTVAL,#{itemCate},#{uNo},#{itemName},#{itemMinOrdUnit},SYSDATE,#{itemComProdFlag},DEFAULT)
	</insert>
	<insert id="AddItemPrice" parameterType="hashmap">	
	INSERT INTO ITEM_PRICE VALUES (ITEM_PRICE_SEQ.NEXTVAL,ITEM_SEQ.CURRVAL,#{uNo},#{itemPrice},SYSDATE)
	</insert>
	
	<!-- 품목수정 -->
	<update id="EditItem" parameterType="hashmap">
	UPDATE ITEM SET CATE_NO = #{itemCate},ITEM_NAME = #{itemName}, MIN_ORD_UNIT = #{itemMinOrdUnit}, COM_PROD_FLAG = #{itemComProdFlag}
	WHERE ITEM_NO = #{itemNo}
	</update>
	<!-- 수정 시 가격변동이 있는 경우 품목_가격 테이블에 해당 이력(변경가격) 추가 -->
	<insert id="EditItemPrice" parameterType="hashmap">	
	INSERT INTO ITEM_PRICE VALUES (ITEM_PRICE_SEQ.NEXTVAL,#{itemNo},#{uNo},#{itemPrice},SYSDATE)
	</insert>
	
	<!-- 품목 삭제  / 삭제여부 변경-->
	<update id="DelItem" parameterType="hashmap">
	UPDATE ITEM SET DEL_FLAG = 0 WHERE ITEM_NO = #{itemNo}
	</update>
	
	<!-- 재고상세 / 유통기한 별 재고상세 -->
	<select id = "getSDetail" parameterType="hashmap" resultType="hashmap">
	SELECT I.ITEM_NO,I.ITEM_NAME,TO_CHAR(A.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE ,A.PPSUM
               FROM (
               SELECT P.ITEM_NO,P.EXPIRY_DATE AS EXPIRY_DATE,(NVL(ISUM,0)-NVL(PSUM,0)-NVL(SSUM,0)) AS PPSUM
               FROM (
                    SELECT HS.ITEM_NO , HS.EXPIRY_DATE AS EXPIRY_DATE ,SUM(HS.CNT)AS ISUM
                    FROM HQ_STOR HS INNER JOIN  ITEM I
                                ON I.ITEM_NO = HS.ITEM_NO
                                AND HS.ITEM_NO = #{itemNo}
                    GROUP BY HS.ITEM_NO , HS.EXPIRY_DATE) I  INNER JOIN ( SELECT HS.ITEM_NO , HS.EXPIRY_DATE AS EXPIRY_DATE ,SUM(NVL(HD.CNT,0)) AS PSUM
                                                                           FROM HQ_STOR HS LEFT OUTER JOIN HQ_DISCARD HD
                                                                                            ON HD.STOR_NO = HS.STOR_NO
                                                                            WHERE HS.ITEM_NO = #{itemNo}
                                                                           GROUP BY HS.ITEM_NO , HS.EXPIRY_DATE ) P 
                                                             ON I.EXPIRY_DATE = P.EXPIRY_DATE              
                                                                           LEFT OUTER JOIN (SELECT  OI.ITEM_NO, OI.EXPIRY_DATE AS EXPIRY_DATE, SUM(NVL(OI.CNT,0)) AS SSUM
                                                                                                                                       FROM ORD O INNER JOIN ORD_ITEM OI
                                                                                                                                                   ON O.ORD_NO = OI.ORD_NO
                                                                                                                                                   AND OI.ITEM_NO = #{itemNo}
                                                                                                                                                   AND O.STAT_CODE IN (4,5,6,7,8)
                                                                                                                                      GROUP BY OI.ITEM_NO, OI.EXPIRY_DATE) S
                                                                                  
                                                                            ON P.EXPIRY_DATE = S.EXPIRY_DATE) A INNER JOIN ITEM I
                                                                                                                 ON A.ITEM_NO = I.ITEM_NO
                                                                            WHERE A.PPSUM > 0
                                                                            ORDER BY EXPIRY_DATE
	</select>
	
	<!-- 재고상세 / 출고재고 리스트 -->
	<select id = "getSRelList" parameterType="hashmap" resultType="hashmap">
	SELECT O.ORD_NO, I.ITEM_NO, I.ITEM_NAME, OI.CNT,TO_CHAR(OI.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,TO_CHAR(O.ENROLL_DATE,'YYYY-MM-DD') AS ORD_ENROLL_DATE,B.BRCH_NAME
   	FROM ORD O INNER JOIN ORD_ITEM OI
                ON O.ORD_NO = OI.ORD_NO
                AND OI.ITEM_NO = #{itemNo}
                AND O.STAT_CODE IN (4,5,6,7,8)
                INNER JOIN BRCH B
                ON O.BRCH_NO = B.BRCH_NO
                INNER JOIN ITEM I
                ON OI.ITEM_NO = I.ITEM_NO
	</select>
	
	<!-- 재고상세 / 폐기 리스트 -->
	<select id ="getSDList" parameterType="hashmap" resultType="hashmap">
	SELECT TO_CHAR(HD.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE,HD.CNT,TO_CHAR(HS.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,NVL(HD.NOTE,' ')AS NOTE,HU.ID
    FROM HQ_DISCARD HD INNER JOIN HQ_STOR HS
                        ON HD.STOR_NO = HS.STOR_NO
                        INNER JOIN HQ_USER HU
                        ON HD.USER_NO = HU.USER_NO
                        AND HS.ITEM_NO = #{itemNo}
	ORDER BY  HD.ENROLL_DATE DESC                      
	</select>
	
	<!-- 본사 재고 추가 -->
	<insert id="AddStock" parameterType="hashmap">
	INSERT INTO HQ_STOR VALUES (HQ_STOR_SEQ.NEXTVAL,#{itemNo},#{uNo},#{stockCnt},#{stockExpiryDate},SYSDATE)
	</insert>
	
	<!-- 본사 재고 폐기 --><!-- 유통기한과 품목번호가 동일한 상품은 제일 먼저 ENROLL된 재고에서 폐기가 이루어짐 -->
	<insert id="DiscardStock" parameterType="hashmap">
	INSERT INTO HQ_DISCARD (DISCARD_NO,STOR_NO,USER_NO,CNT,NOTE,ENROLL_DATE)
		SELECT HQ_DISCARD_SEQ.NEXTVAL,STOR_NO,#{uNo},#{discardCnt},#{discardNote},SYSDATE
		FROM(
			SELECT HQ_STOR.*,ROW_NUMBER()OVER(ORDER BY ENROLL_DATE) AS RNK
			FROM HQ_STOR
			WHERE ITEM_NO = #{itemNo}
			AND EXPIRY_DATE = #{expDate})
		WHERE RNK = 1
	</insert>
	
	<!-- 입고확인 버튼 클릭 시 보여지는 팝업 리스트 (본사 재고 입고 이력)-->
	<select id ="getHSHList" parameterType="hashmap" resultType="hashmap">
	SELECT TO_CHAR(HS.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE ,HS.CNT,HU.ID
	FROM HQ_STOR HS INNER JOIN HQ_USER HU
                ON HS.USER_NO = HU.USER_NO
                AND HS.ITEM_NO = #{itemNo}
                AND TO_CHAR(HS.EXPIRY_DATE,'YYYY-MM-DD') = #{expDate}                   
	</select>
	
	<!-- 본사 폐기리스트 행 개수 -->
	<select id ="getHSDCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM HQ_DISCARD HD INNER JOIN HQ_STOR HS
                    ON HD.STOR_NO = HS.STOR_NO
                    INNER JOIN ITEM I
                    ON HS.ITEM_NO  = I.ITEM_NO
    WHERE 1=1
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(HD.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>
	</select>
	
	<!-- 본사 폐기 목록 조회 -->
	<select id = "getHSDList" parameterType="hashmap" resultType="hashmap">
	SELECT CATE_NAME,CATE_NO,ITEM_NO,ITEM_NAME,TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE ,CNT,TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,NOTE,RNUM
	FROM(
		SELECT IC.CATE_NAME,I.CATE_NO,I.ITEM_NO,I.ITEM_NAME,HD.ENROLL_DATE,HD.CNT,HS.EXPIRY_DATE,HD.NOTE,ROW_NUMBER() OVER(ORDER BY HD.ENROLL_DATE DESC )AS RNUM
		FROM HQ_DISCARD HD INNER JOIN HQ_STOR HS
         	           ON HD.STOR_NO = HS.STOR_NO
          	          INNER JOIN ITEM I
         	           ON HS.ITEM_NO = I.ITEM_NO
         	          INNER JOIN ITEM_CATE IC
         	           ON I.CATE_NO = IC.CATE_NO
        <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  IC.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(HD.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>)
	WHERE RNUM BETWEEN #{startCnt} AND #{endCnt}
	
	</select>
	
	<!-- 지점 재고리스트 행 개수 -->
	<select id ="getBSLCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
    FROM (SELECT BS.ITEM_NO, BS.EXPIRY_DATE , SUM(BS.CNT) AS ISUM              
          FROM BRCH_STOR BS   INNER JOIN ORD O
                                ON BS.ORD_NO = O.ORD_NO
                                AND O.BRCH_NO = #{brchNo}
          GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE ) I LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BD.CNT) AS PSUM
                                                                    FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
                                                                                         ON BD.STOR_NO = BS.STOR_NO
                                                                                         INNER JOIN ORD O
                                                                                         ON BS.ORD_NO = O.ORD_NO
                                                                                         AND O.BRCH_NO = #{brchNo}
                                                                    GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE) P
                                                ON I.ITEM_NO = P.ITEM_NO
                                                AND I.EXPIRY_DATE = P.EXPIRY_DATE
                                                                    LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BUI.CNT) AS SSUM
                                                                                        FROM BRCH_STOR BS INNER JOIN BRCH_USE_ITEM BUI
                                                                                                             ON BS.STOR_NO = BUI.STOR_NO
                                                                                                             INNER JOIN ORD O
                                                                                                             ON BS.ORD_NO = O.ORD_NO
                                                                                                             AND O.BRCH_NO = #{brchNo}
                                                                                        GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE)S
                                                                       ON I.ITEM_NO = S.ITEM_NO      
                                                                         AND I.EXPIRY_DATE = S.EXPIRY_DATE
                                                                                INNER JOIN ITEM IT
                                                                                ON I.ITEM_NO = IT.ITEM_NO
    WHERE (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) > 0
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND IT.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND IT.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  IT.CATE_NO = #{cate}
	</if>
	</select>
	
	<!-- 지점 재고리스트 --><!-- 품목별 -->
	<select id = "getBSList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT CATE_NAME, ITEM_NO, ITEM_NAME, HSTOCK, SAFECNT, EXPIRY_DATE
	FROM (
        SELECT IC.CATE_NAME, I.ITEM_NO, I.ITEM_NAME, A.HSTOCK, NVL(ISS.SAFE_STOCK_CNT,0) AS SAFECNT, ROW_NUMBER() OVER (ORDER BY I.ITEM_NO) AS RNK, B.EXPIRY_DATE
        FROM (SELECT BS.ITEM_NO, (SCNT-PCNT-UCNT)AS HSTOCK
	        FROM (SELECT BS.ITEM_NO,SUM(BS.CNT) SCNT
	              FROM BRCH_STOR BS INNER JOIN ORD O
	                                ON BS.ORD_NO = O.ORD_NO
	                                AND O.BRCH_NO = #{brchNo}
	              GROUP BY BS.ITEM_NO) BS INNER JOIN  (SELECT BS.ITEM_NO,SUM(NVL(BD.CNT,0)) AS PCNT
	                                                   FROM BRCH_STOR BS INNER JOIN ORD O
	                                                                      ON BS.ORD_NO = O.ORD_NO
	                                                                      AND O.BRCH_NO = #{brchNo}
	                                                                      LEFT OUTER JOIN  BRCH_DISCARD BD
	                                                                      ON BS.STOR_NO = BD.STOR_NO
	                                                   GROUP BY  BS.ITEM_NO) BD
	                                      ON BS.ITEM_NO = BD.ITEM_NO
	                                      INNER JOIN (SELECT BS.ITEM_NO,SUM(NVL(BUI.CNT,0)) AS UCNT
	                                                  FROM BRCH_STOR BS INNER JOIN ORD O
	                                                                    ON BS.ORD_NO = O.ORD_NO
	                                                                    AND O.BRCH_NO = #{brchNo}
	                                                                    LEFT OUTER JOIN  BRCH_USE_ITEM BUI
	                                                                    ON BS.STOR_NO = BUI.STOR_NO
	                                                  GROUP BY  BS.ITEM_NO) BUI
	                                      ON BS.ITEM_NO = BUI.ITEM_NO) A INNER JOIN ITEM I
	                                                                     ON A.ITEM_NO = I.ITEM_NO
	                                                                     INNER JOIN ITEM_CATE IC
	                                                                     ON I.CATE_NO = IC.CATE_NO
	                                                                     LEFT OUTER JOIN ITEM_SAFE_STOCK ISS
	                                                                     ON A.ITEM_NO = ISS.ITEM_NO
	                                                                     AND ISS.BRCH_NO = #{brchNo}
	                                                                     INNER JOIN (SELECT ITEM_NO,TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE
                                                                                        FROM(
                                                                                            SELECT I.ITEM_NO,I.ITEM_NAME ,A.HSTOCK, A.EXPIRY_DATE, ROW_NUMBER () OVER (PARTITION BY ITEM_NAME ORDER BY A.EXPIRY_DATE) AS RNK
                                                                                            FROM(
                                                                                                SELECT BS.ITEM_NO, BS.EXPIRY_DATE,(SCNT-PCNT-UCNT)AS HSTOCK
                                                                                                FROM (SELECT BS.ITEM_NO,BS.EXPIRY_DATE,SUM(BS.CNT) SCNT
                                                                                                                      FROM BRCH_STOR BS INNER JOIN ORD O
                                                                                                                                        ON BS.ORD_NO = O.ORD_NO
                                                                                                                                        AND O.BRCH_NO = #{brchNo}
                                                                                                                                       
                                                                                                                      GROUP BY BS.ITEM_NO,BS.EXPIRY_DATE) BS INNER JOIN (SELECT BS.ITEM_NO,BS.EXPIRY_DATE,SUM(NVL(BD.CNT,0)) AS PCNT
                                                                                                                                                                         FROM BRCH_STOR BS INNER JOIN ORD O
                                                                                                                                                                                           ON BS.ORD_NO = O.ORD_NO
                                                                                                                                                                                           AND O.BRCH_NO = #{brchNo}
                                                                                                                                                                                         
                                                                                                                                                                                           LEFT OUTER JOIN  BRCH_DISCARD BD
                                                                                                                                                                                           ON BS.STOR_NO = BD.STOR_NO
                                                                                                                                                                         GROUP BY  BS.ITEM_NO,BS.EXPIRY_DATE) BD
                                                                                                                                                             ON BS.EXPIRY_DATE = BD.EXPIRY_DATE
                                                                                                                                                             INNER JOIN (SELECT BS.ITEM_NO,BS.EXPIRY_DATE,SUM(NVL(BUI.CNT,0)) AS UCNT
                                                                                                                                                                         FROM BRCH_STOR BS INNER JOIN ORD O
                                                                                                                                                                                           ON BS.ORD_NO = O.ORD_NO
                                                                                                                                                                                           AND O.BRCH_NO = #{brchNo}
                                                                                                                                                                                          
                                                                                                                                                                                           LEFT OUTER JOIN  BRCH_USE_ITEM BUI
                                                                                                                                                                                           ON BS.STOR_NO = BUI.STOR_NO
                                                                                                                                                                         GROUP BY  BS.ITEM_NO,BS.EXPIRY_DATE) BUI
                                                                                                                                                             ON BS.EXPIRY_DATE = BUI.EXPIRY_DATE) A INNER JOIN ITEM I
                                                                                                                                                                                                    ON A.ITEM_NO = I.ITEM_NO
                                                                                            WHERE HSTOCK > 0                                                                                                        
                                                                                            ORDER BY EXPIRY_DATE)
                                                                                        WHERE RNK = 1) B
                                                                            ON I.ITEM_NO = B.ITEM_NO  
    WHERE HSTOCK > 0
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  IC.CATE_NO = #{cate}
	</if>)  
    WHERE RNK BETWEEN #{startCnt} AND #{endCnt}
    ORDER BY EXPIRY_DATE
	</select>
	
	
	<!-- 지점 재고 상세 유통기한 별 재고 리스트 -->
	<select id = "getBStockExpList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT I.ITEM_NAME ,A.HSTOCK, TO_CHAR(A.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE
	FROM(
	    SELECT BS.ITEM_NO, BS.EXPIRY_DATE,(SCNT-PCNT-UCNT)AS HSTOCK
	    FROM (SELECT BS.ITEM_NO,BS.EXPIRY_DATE,SUM(BS.CNT) SCNT
	                          FROM BRCH_STOR BS INNER JOIN ORD O
	                                            ON BS.ORD_NO = O.ORD_NO
	                                            AND O.BRCH_NO = #{brchNo}
	                                            AND BS.ITEM_NO = #{itemNo}
	                          GROUP BY BS.ITEM_NO,BS.EXPIRY_DATE) BS INNER JOIN (SELECT BS.ITEM_NO,BS.EXPIRY_DATE,SUM(NVL(BD.CNT,0)) AS PCNT
	                                                                             FROM BRCH_STOR BS INNER JOIN ORD O
	                                                                                               ON BS.ORD_NO = O.ORD_NO
	                                                                                               AND O.BRCH_NO = #{brchNo}
	                                                                                               AND BS.ITEM_NO = #{itemNo}
	                                                                                               LEFT OUTER JOIN  BRCH_DISCARD BD
	                                                                                               ON BS.STOR_NO = BD.STOR_NO
	                                                                             GROUP BY  BS.ITEM_NO,BS.EXPIRY_DATE) BD
	                                                                 ON BS.EXPIRY_DATE = BD.EXPIRY_DATE
	                                                                 INNER JOIN (SELECT BS.ITEM_NO,BS.EXPIRY_DATE,SUM(NVL(BUI.CNT,0)) AS UCNT
	                                                                             FROM BRCH_STOR BS INNER JOIN ORD O
	                                                                                               ON BS.ORD_NO = O.ORD_NO
	                                                                                               AND O.BRCH_NO = #{brchNo}
	                                                                                               AND BS.ITEM_NO = #{itemNo}
	                                                                                               LEFT OUTER JOIN  BRCH_USE_ITEM BUI
	                                                                                               ON BS.STOR_NO = BUI.STOR_NO
	                                                                             GROUP BY  BS.ITEM_NO,BS.EXPIRY_DATE) BUI
	                                                                 ON BS.EXPIRY_DATE = BUI.EXPIRY_DATE) A INNER JOIN ITEM I
	                                                                                                        ON A.ITEM_NO = I.ITEM_NO
	WHERE HSTOCK > 0    	                                                                                                        
	ORDER BY EXPIRY_DATE                                                                                                          
	</select>
	
	<!-- 지점 재고 사용 이력 -->
	<select id = "getBStockUseList" parameterType="hashmap" resultType="hashmap"> <!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT I.ITEM_NO, I.ITEM_NAME, BUI.CNT, TO_CHAR(BS.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,TO_CHAR(BUI.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM BRCH_USE_ITEM BUI INNER JOIN BRCH_STOR BS
	                    ON BS.STOR_NO = BUI.STOR_NO
	                    AND BS.ITEM_NO = #{itemNo}
	                    INNER JOIN ORD O
	                    ON BS.ORD_NO = O.ORD_NO
	                    AND O.BRCH_NO = #{brchNo}
	                    INNER JOIN ITEM I
	                    ON BS.ITEM_NO = I.ITEM_NO
	ORDER BY ENROLL_DATE DESC
	</select>
	
	<!-- 지점 재고 폐기 이력 -->
	<select id = "getBStockDiscardList" parameterType="hashmap" resultType="hashmap">
	SELECT I.ITEM_NAME, BD.CNT, TO_CHAR(BS.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,BD.NOTE,TO_CHAR(BD.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
	                    ON BS.STOR_NO = BD.STOR_NO
	                    AND BS.ITEM_NO = #{itemNo}
	                    INNER JOIN ORD O
	                    ON BS.ORD_NO = O.ORD_NO
	                    AND O.BRCH_NO = #{brchNo}
	                    INNER JOIN ITEM I
	                    ON BS.ITEM_NO = I.ITEM_NO
	ORDER BY ENROLL_DATE DESC
	</select>
	
	<!-- 지점 재고 입고 이력 -->
	<select id = "getBStockStorList" parameterType="hashmap" resultType="hashmap">
	SELECT O.ORD_NO,I.ITEM_NAME,BS.CNT, TO_CHAR(BS.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE, TO_CHAR(BS.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM BRCH_STOR BS INNER JOIN ORD O
	                    ON BS.ORD_NO = O.ORD_NO
	                    AND O.BRCH_NO = #{brchNo}
	                    AND BS.ITEM_NO = #{itemNo}
	                    INNER JOIN ITEM I
	                    ON BS.ITEM_NO = I.ITEM_NO
	ORDER BY ENROLL_DATE DESC
	</select> 
	
	<!-- 지점 재고 폐기 기능 -->
	<insert id="BDiscardStock" parameterType="hashmap">
	INSERT INTO BRCH_DISCARD(DISCARD_NO,STOR_NO,CNT,NOTE,ENROLL_DATE)
	SELECT BRCH_DISCARD_SEQ.NEXTVAL,STOR_NO,#{discardCnt},#{discardNote},SYSDATE
	FROM(
	SELECT BS.*,ROW_NUMBER()OVER(ORDER BY BS.ENROLL_DATE) AS RNK
	FROM BRCH_STOR BS INNER JOIN ORD O
	                  ON BS.ORD_NO = O.ORD_NO
	                  AND O.BRCH_NO = #{brchNo}
	                  AND BS.ITEM_NO = #{itemNo}
	                  AND BS.EXPIRY_DATE = #{expDate})        
	WHERE RNK = 1
	</insert>
	
	<!-- 지점 재고 수정 리스트 그리기 (페이징 x)  -->
	<select id = "getBSEList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT CATE_NAME, ITEM_NO, ITEM_NAME, CURCNT, SAFECNT, TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE
	FROM(
	    SELECT IC.CATE_NAME, IT.ITEM_NO, IT.ITEM_NAME, (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) AS CURCNT ,NVL(ISS.SAFE_STOCK_CNT,0) AS SAFECNT, I.EXPIRY_DATE
	    FROM (SELECT BS.ITEM_NO, BS.EXPIRY_DATE , SUM(BS.CNT) AS ISUM              
	          FROM BRCH_STOR BS   INNER JOIN ORD O
	                                ON BS.ORD_NO = O.ORD_NO
	                                AND O.BRCH_NO = #{brchNo}
	          GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE ) I LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BD.CNT) AS PSUM
	                                                                    FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
	                                                                                         ON BD.STOR_NO = BS.STOR_NO
	                                                                                         INNER JOIN ORD O
	                                                                                         ON BS.ORD_NO = O.ORD_NO
	                                                                                         AND O.BRCH_NO = #{brchNo}
	                                                                    GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE) P
	                                                ON I.ITEM_NO = P.ITEM_NO
	                                                AND I.EXPIRY_DATE = P.EXPIRY_DATE
	                                                                    LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BUI.CNT) AS SSUM
	                                                                                        FROM BRCH_STOR BS INNER JOIN BRCH_USE_ITEM BUI
	                                                                                                             ON BS.STOR_NO = BUI.STOR_NO
	                                                                                                             INNER JOIN ORD O
	                                                                                                             ON BS.ORD_NO = O.ORD_NO
	                                                                                                             AND O.BRCH_NO = #{brchNo}
	                                                                                        GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE)S
	                                                                       ON I.ITEM_NO = S.ITEM_NO      
	                                                                         AND I.EXPIRY_DATE = S.EXPIRY_DATE
	                                                                                    INNER JOIN ITEM IT
	                                                                                    ON I.ITEM_NO = IT.ITEM_NO
	                                                                                    INNER JOIN ITEM_CATE IC
	                                                                                    ON IT.CATE_NO = IC.CATE_NO
	                                                                                    LEFT OUTER JOIN ITEM_SAFE_STOCK ISS
	                                                                                    ON I.ITEM_NO = ISS.ITEM_NO
	                                                                                    AND ISS.BRCH_NO = #{brchNo}	
    WHERE (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) > 0 
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND IT.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND IT.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  IT.CATE_NO = #{cate}
	</if>)
    ORDER BY EXPIRY_DATE
	</select>
	
	<!-- 지점 재고 수정 -->
	<insert id="EidtBStock" parameterType="hashmap">
	INSERT INTO BRCH_USE_ITEM(USE_ITEM_NO,STOR_NO,CNT,ENROLL_DATE)
	SELECT BRCH_USE_ITEM_SEQ.NEXTVAL,STOR_NO,#{chkcurCnt}-#{editcurCnt},SYSDATE
	FROM(
	SELECT BS.*,ROW_NUMBER()OVER(ORDER BY BS.ENROLL_DATE) AS RNK
	FROM BRCH_STOR BS INNER JOIN ORD O
	                  ON BS.ORD_NO = O.ORD_NO
	                  AND O.BRCH_NO = #{brchNo}
	                  AND BS.ITEM_NO = #{itemNo}
	                  AND BS.EXPIRY_DATE = #{expDate})        
	WHERE RNK = 1
	</insert>
	
	<!-- 지점 재고 수정 페이지 내 금일 판매목록-->
	<select id = "getBSSellList" parameterType="hashmap" resultType="hashmap"><!-- 날짜 정보와 지점 정보 수정 필요 지점:db내 아이디, 날짜 : sysdate -->
	SELECT PC.CATE_NAME,PM.MENU_NAME ,SUM(SM.CNT) AS CNT
	FROM SALES S INNER JOIN SALES_MENU SM
	             ON S.SALES_NO = SM.SALES_NO
	             AND S.BRCH_NO = #{brchNo}
	             AND TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD') = TO_CHAR(SYSDATE,'YYYY-MM-DD')
	             INNER JOIN POS_MENU PM
	             ON PM.MENU_NO = SM.MENU_NO
	             INNER JOIN POS_CATE PC
	             ON PC.CATE_NO = PM.POS_CATE_NO
	GROUP BY PM.MENU_NAME,PC.CATE_NAME
	ORDER BY PC.CATE_NAME
	</select>
	
	<!-- 지점 안전재고 수정 -->
	<update id = "BSSEdit" parameterType="hashmap">
	UPDATE ITEM_SAFE_STOCK SET SAFE_STOCK_CNT = #{safeCnt}
	WHERE BRCH_NO = #{brchNo}
	AND ITEM_NO = #{itemNo}
	</update>
	
	
	<!-- 지점 입고 재고 리스트 행 개수 -->
	<select id = "getBSSCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
    FROM BRCH_STOR BS INNER JOIN ORD O
                      ON BS.ORD_NO = O.ORD_NO
                      AND O.BRCH_NO = #{brchNo}
                      INNER JOIN ITEM I
                      ON BS.ITEM_NO = I.ITEM_NO
                      INNER JOIN ITEM_CATE IC
                      ON I.CATE_NO = IC.CATE_NO
	<if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(BS.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>
	</select>
	
	<!-- 지점 입고 재고 리스트 -->
	<select id = "getBSSList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT ORD_NO,CATE_NAME,ITEM_NO,ITEM_NAME,CNT,TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE ,TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM(
	    SELECT O.ORD_NO,IC.CATE_NAME, I.ITEM_NO, I.ITEM_NAME, BS.CNT,BS.EXPIRY_DATE,BS.ENROLL_DATE,ROW_NUMBER() OVER (ORDER BY BS.ENROLL_DATE DESC) AS RNK
	    FROM BRCH_STOR BS INNER JOIN ORD O
	                      ON BS.ORD_NO = O.ORD_NO
	                      AND O.BRCH_NO = #{brchNo}
	                      INNER JOIN ITEM I
	                      ON BS.ITEM_NO = I.ITEM_NO
	                      INNER JOIN ITEM_CATE IC
	                      ON I.CATE_NO = IC.CATE_NO
	    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(BS.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>)
	WHERE RNK BETWEEN #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 지점 재고 사용 리스트 행 개수 -->
	<select id = "getBSUCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM BRCH_USE_ITEM BUI INNER JOIN BRCH_STOR BS
	                        ON BUI.STOR_NO = BS.STOR_NO
	                        INNER JOIN ORD O
	                        ON BS.ORD_NO = O.ORD_NO
	                        AND O.BRCH_NO = #{brchNo}
	                        INNER JOIN ITEM I
	                        ON BS.ITEM_NO = I.ITEM_NO
	                        INNER JOIN ITEM_CATE IC
	                        ON I.CATE_NO = IC.CATE_NO 
	<if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(BUI.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>
	</select>
	
	<!-- 지점 재고 사용 리스트-->
	<select id = "getBSUList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT CATE_NAME,ITEM_NO,ITEM_NAME,CNT,TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE ,TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM(
	SELECT IC.CATE_NAME, I.ITEM_NO, I.ITEM_NAME, BUI.CNT, BS.EXPIRY_DATE, BUI.ENROLL_DATE,ROW_NUMBER() OVER (ORDER BY BUI.ENROLL_DATE DESC) AS RNK
	FROM BRCH_USE_ITEM BUI INNER JOIN BRCH_STOR BS
	                        ON BUI.STOR_NO = BS.STOR_NO
	                        INNER JOIN ORD O
	                        ON BS.ORD_NO = O.ORD_NO
	                        AND O.BRCH_NO = #{brchNo}
	                        INNER JOIN ITEM I
	                        ON BS.ITEM_NO = I.ITEM_NO
	                        INNER JOIN ITEM_CATE IC
	                        ON I.CATE_NO = IC.CATE_NO 
	    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(BUI.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>)
	WHERE RNK BETWEEN #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 지점 재고 폐기 리스트 행 개수 -->
	<select id = "getBSDCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
	                        ON BD.STOR_NO = BS.STOR_NO
	                        INNER JOIN ORD O
	                        ON BS.ORD_NO = O.ORD_NO
	                        AND O.BRCH_NO = #{brchNo}
	                        INNER JOIN ITEM I
	                        ON BS.ITEM_NO = I.ITEM_NO
	                        INNER JOIN ITEM_CATE IC
	                        ON I.CATE_NO = IC.CATE_NO 
	<if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(BD.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>
	</select>
	
	<!-- 지점 재고 폐기 리스트-->
	<select id = "getBSDList" parameterType="hashmap" resultType="hashmap">
	SELECT CATE_NAME,ITEM_NO,ITEM_NAME,CNT,TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,NOTE,TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM(
	SELECT IC.CATE_NAME, I.ITEM_NO, I.ITEM_NAME, BD.CNT, BS.EXPIRY_DATE, BD.NOTE, BD.ENROLL_DATE,ROW_NUMBER() OVER (ORDER BY BD.ENROLL_DATE DESC) AS RNK
	FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
	                        ON BD.STOR_NO = BS.STOR_NO
	                        INNER JOIN ORD O
	                        ON BS.ORD_NO = O.ORD_NO
	                        AND O.BRCH_NO = #{brchNo}
	                        INNER JOIN ITEM I
	                        ON BS.ITEM_NO = I.ITEM_NO
	                        INNER JOIN ITEM_CATE IC
	                        ON I.CATE_NO = IC.CATE_NO 
	    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != ''">
			AND  I.CATE_NO = #{cate}
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND TO_CHAR(BD.ENROLL_DATE,'YYYY-MM-DD') BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>)
	WHERE RNK BETWEEN #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 지점 입고이력 버튼 클릭 시 나오는 리스트 -->
	<select id = "getBSHList" parameterType="hashmap" resultType="hashmap">
	SELECT O.ORD_NO, BS.CNT, TO_CHAR(BS.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM BRCH_STOR BS INNER JOIN ORD O
	                  ON BS.ORD_NO = O.ORD_NO
	                  AND O.BRCH_NO = #{brchNo}
	                  AND BS.ITEM_NO = #{itemNo}
	                  AND TO_CHAR(BS.EXPIRY_DATE,'YYYY-MM-DD') = #{expDate}
	</select>
	
	<!-- 지점 입고 처리 -->
	<insert id="StorBStock" parameterType="hashmap">
	INSERT INTO BRCH_STOR(STOR_NO,ORD_NO,ITEM_NO,CNT,EXPIRY_DATE,ENROLL_DATE)
	SELECT BRCH_STOR_SEQ.NEXTVAL,#{oNo},#{iNo},(A.CNT - NVL(B.CNT,0)) AS CNT,#{expdate},SYSDATE
	FROM
	(SELECT O.ORD_NO, OI.ITEM_NO,OI.CNT
	FROM ORD O INNER JOIN ORD_ITEM OI
	ON O.ORD_NO = OI.ORD_NO
	AND O.ORD_NO = #{oNo}
	AND ITEM_NO = #{iNo}) A LEFT OUTER JOIN (SELECT R.ORD_NO, RI.ITEM_NO,RI.CNT
	                                                FROM REF R INNER JOIN REF_ITEM RI
	                                                ON R.REF_NO = RI.REF_NO
	                                                AND R.ORD_NO = #{oNo}
	                                                AND ITEM_NO = #{iNo}) B
	                               ON A.ITEM_NO = B.ITEM_NO 
	</insert>
	
	<!-- 지점 입고 시 안전재고 수량이 있는 상품인지 체크 --><!-- 지점번호 불러오는 것은 추후 처리 -->
	<select id="StorBSafeStock" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM ITEM_SAFE_STOCK
	WHERE BRCH_NO = 2
	AND ITEM_NO = #{iNo}
	</select>
	
	<!-- 안전재고 수량이 없는 품목이라면 안전재고 1로 인서트 --><!-- 지점번호 불러오는 것은 추후 처리 -->
	<insert id="BSafeStock" parameterType="hashmap">
	INSERT INTO ITEM_SAFE_STOCK VALUES (2,#{iNo},1)   
	</insert>
	
	<!-- 지점 입고 처리 완료 시 입고 버튼 사라지도록 입고 플래그 변경 -->
	<update id = "storbtnupdate" parameterType="hashmap" >
	UPDATE ORD SET STOR_FLAG = 0
	WHERE ORD_NO = #{oNo}
	</update>
</mapper> 
