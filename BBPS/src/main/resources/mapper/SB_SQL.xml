<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sb"><!-- namespace: 클래스명과동일 -->
	
	<!-- 품목리스트 행 개수 -->
	<select id ="getPCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(DISTINCT I.ITEM_NO)
	FROM ITEM I INNER JOIN ITEM_PRICE IP
     ON I.ITEM_NO = IP.ITEM_NO
    WHERE 1=1
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	</select>
	
	<!-- 품목리스트 -->
	<select id ="getPList" parameterType="hashmap" resultType="hashmap">
	SELECT ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT
	FROM(
		SELECT ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT,ROW_NUMBER() OVER(ORDER BY ITEM_NO DESC) AS RNK
        FROM(
        SELECT I.ITEM_NO,I.CATE_NO,I.ITEM_NAME,IP.PRICE,I.MIN_ORD_UNIT,ROW_NUMBER() OVER(partition by I.ITEM_NO ORDER BY IP.ENROLL_DATE DESC) AS RNK
		FROM ITEM I INNER JOIN ITEM_PRICE IP
    	 ON I.ITEM_NO = IP.ITEM_NO
    	 AND I.DEL_FLAG = 1)
         WHERE RNK = 1
   		 <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
    	 )A 
	WHERE A.RNK BETWEEN  #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 품목 상세보기 -->
	<select id = "getPDetail" parameterType="hashmap" resultType="hashmap">
	SELECT ITEM_NO,CATE_NO,ITEM_NAME,PRICE,MIN_ORD_UNIT,COM_PROD_FLAG
	FROM(
	SELECT I.ITEM_NO,I.CATE_NO,I.ITEM_NAME,IP.PRICE,I.MIN_ORD_UNIT,I.COM_PROD_FLAG,ROW_NUMBER() OVER(ORDER BY IP.ENROLL_DATE DESC) AS RNK
			FROM ITEM I INNER JOIN ITEM_PRICE IP
    		 ON I.ITEM_NO = IP.ITEM_NO
			AND I.ITEM_NO = #{itemNo}) A
	WHERE A.RNK = 1  
	</select>
	
	<!-- 품목 상세보기 내 가격 히스토리  -->
	<select id ="getPHList" parameterType="hashmap" resultType="hashmap">
	SELECT NI.ITEM_NO, NVL(OI.PRICE, 0) AS OLD_PRICE, NI.PRICE AS NEW_PRICE,NI.ID,TO_CHAR(NI.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE
	FROM (SELECT IP.ITEM_NO, ROW_NUMBER() OVER(ORDER BY IP.PRICE_NO ASC) AS RNUM, IP.PRICE,HU.ID,IP.ENROLL_DATE
    	  FROM ITEM_PRICE IP INNER JOIN HQ_USER HU
       	  ON IP.USER_NO = HU.USER_NO
    	  WHERE IP.ITEM_NO = #{itemNo}) OI RIGHT OUTER JOIN (SELECT IP.ITEM_NO, IP.PRICE_NO, ROW_NUMBER() OVER(ORDER BY IP.PRICE_NO ASC) AS RNUM, IP.PRICE,HU.ID,IP.ENROLL_DATE
                                             FROM ITEM_PRICE IP INNER JOIN HQ_USER HU
                                             ON IP.USER_NO = HU.USER_NO
                                              WHERE IP.ITEM_NO = #{itemNo}) NI
                                   ON OI.RNUM = NI.RNUM - 1
	ORDER BY PRICE_NO DESC
	</select>
	
	<!-- 품목추가 --><!-- 사용자 번호는 로그인된  대상으로 수정 필요  및 현재 시퀀스는 테스트용으로 만든 시퀀스로 쓴 것이므로 나중에 진짜 시퀀스로 바꿔야함-->
	<insert id="AddItem" parameterType="hashmap">	
	INSERT INTO ITEM VALUES (TEST_SEQ.NEXTVAL,#{itemCate},4,#{itemName},#{itemMinOrdUnit},SYSDATE,#{itemComProdFlag},DEFAULT)
	</insert>
	<insert id="AddItemPrice" parameterType="hashmap">	
	INSERT INTO ITEM_PRICE VALUES (TEST_SEQ2.NEXTVAL,TEST_SEQ.CURRVAL,4,#{itemPrice},SYSDATE)
	</insert>
	
	<!-- 품목수정 -->
	<update id="EditItem" parameterType="hashmap">
	UPDATE ITEM SET CATE_NO = #{itemCate},ITEM_NAME = #{itemName}, MIN_ORD_UNIT = #{itemMinOrdUnit}, COM_PROD_FLAG = #{itemComProdFlag}
	WHERE ITEM_NO = #{itemNo}
	</update>
	<!-- 수정 시 가격변동이 있는 경우 품목_가격 테이블에 해당 이력(변경가격) 추가 --><!-- 테스트 시퀀스로 시퀀스 변경 필요 -->
	<insert id="EditItemPrice" parameterType="hashmap">	
	INSERT INTO ITEM_PRICE VALUES (TEST_SEQ2.NEXTVAL,#{itemNo},4,#{itemPrice},SYSDATE)
	</insert>
	
	<!-- 품목 삭제  / 삭제여부 변경-->
	<update id="DelItem" parameterType="hashmap">
	UPDATE ITEM SET DEL_FLAG = 0 WHERE ITEM_NO = #{itemNo}
	</update>
	
	<!-- 재고상세 / 유통기한 별 재고상세 -->
	<select id = "getSDetail" parameterType="hashmap" resultType="hashmap">
	SELECT I.ITEM_NO,I.ITEM_NAME,TO_CHAR(A.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE ,A.PPSUM
               FROM (
               SELECT P.ITEM_NO,P.EXPIRY_DATE AS EXPIRY_DATE,(NVL(ISUM,0)-NVL(PSUM,0)-NVL(SSUM,0)) AS PPSUM
               FROM (
                    SELECT HS.ITEM_NO , HS.EXPIRY_DATE AS EXPIRY_DATE ,SUM(HS.CNT)AS ISUM
                    FROM HQ_STOR HS INNER JOIN  ITEM I
                                ON I.ITEM_NO = HS.ITEM_NO
                                AND HS.ITEM_NO = #{itemNo}
                    GROUP BY HS.ITEM_NO , HS.EXPIRY_DATE) I  INNER JOIN ( SELECT HS.ITEM_NO , HS.EXPIRY_DATE AS EXPIRY_DATE ,SUM(NVL(HD.CNT,0)) AS PSUM
                                                                           FROM HQ_STOR HS LEFT OUTER JOIN HQ_DISCARD HD
                                                                                            ON HD.STOR_NO = HS.STOR_NO
                                                                            WHERE HS.ITEM_NO = #{itemNo}
                                                                           GROUP BY HS.ITEM_NO , HS.EXPIRY_DATE ) P 
                                                             ON I.EXPIRY_DATE = P.EXPIRY_DATE              
                                                                           LEFT OUTER JOIN (SELECT  OI.ITEM_NO, OI.EXPIRY_DATE AS EXPIRY_DATE, SUM(NVL(OI.CNT,0)) AS SSUM
                                                                                                                                       FROM ORD O INNER JOIN ORD_ITEM OI
                                                                                                                                                   ON O.ORD_NO = OI.ORD_NO
                                                                                                                                                   AND OI.ITEM_NO = #{itemNo}
                                                                                                                                      GROUP BY OI.ITEM_NO, OI.EXPIRY_DATE) S
                                                                                  
                                                                            ON P.EXPIRY_DATE = S.EXPIRY_DATE) A INNER JOIN ITEM I
                                                                                                                 ON A.ITEM_NO = I.ITEM_NO
                                                                            WHERE A.PPSUM > 0
	</select>
	
	<!-- 재고상세 / 출고재고 리스트 -->
	<select id = "getSRelList" parameterType="hashmap" resultType="hashmap">
	SELECT O.ORD_NO, I.ITEM_NO, I.ITEM_NAME, OI.CNT,TO_CHAR(NVL(OI.EXPIRY_DATE,'2999-01-01'),'YYYY-MM-DD') AS EXPIRY_DATE,TO_CHAR(O.ENROLL_DATE,'YYYY-MM-DD') AS ORD_ENROLL_DATE,B.BRCH_NAME
   	FROM ORD O INNER JOIN ORD_ITEM OI
                ON O.ORD_NO = OI.ORD_NO
                AND OI.ITEM_NO = #{itemNo}
                AND O.STAT_CODE IN (4,5,7)
                INNER JOIN BRCH B
                ON O.BRCH_NO = B.BRCH_NO
                INNER JOIN ITEM I
                ON OI.ITEM_NO = I.ITEM_NO
	</select>
	
	<!-- 재고상세 / 폐기 리스트 -->
	<select id ="getSDList" parameterType="hashmap" resultType="hashmap">
	SELECT TO_CHAR(HD.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE,HD.CNT,TO_CHAR(HS.EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,NVL(HD.NOTE,' ')AS NOTE,HU.ID
    FROM HQ_DISCARD HD INNER JOIN HQ_STOR HS
                        ON HD.STOR_NO = HS.STOR_NO
                        INNER JOIN HQ_USER HU
                        ON HD.USER_NO = HU.USER_NO
                        AND HS.ITEM_NO = #{itemNo}
	ORDER BY  HD.ENROLL_DATE DESC                      
	</select>
	
	<!-- 본사 재고 추가 -->
	<insert id="AddStock" parameterType="hashmap">
	INSERT INTO HQ_STOR VALUES (HQ_STOR_SEQ.NEXTVAL,#{itemNo},4,#{stockCnt},#{stockExpiryDate},SYSDATE)
	</insert>
	
	<!-- 본사 재고 폐기 --><!-- 유통기한과 품목번호가 동일한 상품은 제일 먼저 ENROLL된 재고에서 폐기가 이루어짐 -->
	<insert id="DiscardStock" parameterType="hashmap">
	INSERT INTO HQ_DISCARD (DISCARD_NO,STOR_NO,USER_NO,CNT,NOTE,ENROLL_DATE)
		SELECT HQ_DISCARD_SEQ.NEXTVAL,STOR_NO,4,#{discardCnt},#{discardNote},SYSDATE
		FROM(
			SELECT HQ_STOR.*,ROW_NUMBER()OVER(ORDER BY ENROLL_DATE) AS RNK
			FROM HQ_STOR
			WHERE ITEM_NO = #{itemNo}
			AND EXPIRY_DATE = #{expDate})
		WHERE RNK = 1
	</insert>
	
	<!-- 입고확인 버튼 클릭 시 보여지는 팝업 리스트 (본사 재고 입고 이력)-->
	<select id ="getHSHList" parameterType="hashmap" resultType="hashmap">
	SELECT TO_CHAR(HS.ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE ,HS.CNT,HU.ID
	FROM HQ_STOR HS INNER JOIN HQ_USER HU
                ON HS.USER_NO = HU.USER_NO
                AND HS.ITEM_NO = #{itemNo}
                AND HS.EXPIRY_DATE = #{expDate}                   
	</select>
	
	<!-- 본사 폐기리스트 행 개수 -->
	<select id ="getHSDCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM HQ_DISCARD HD INNER JOIN HQ_STOR HS
                    ON HD.STOR_NO = HS.STOR_NO
                    INNER JOIN ITEM I
                    ON HS.ITEM_NO  = I.ITEM_NO
    WHERE 1=1
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != '' and cate != 7">
		<choose>
			<when test = "cate == 0">
			AND  I.CATE_NO = 0
			</when>
			<when test = "cate == 1">
			AND  I.CATE_NO = 1
			</when>
			<when test = "cate == 2">
			AND  I.CATE_NO = 2
			</when>
			<when test = "cate == 3">
			AND  I.CATE_NO = 3
			</when>
			<when test = "cate == 4">
			AND  I.CATE_NO = 4
			</when>
		</choose>
	</if>	
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND HD.ENROLL_DATE BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>
	</select>
	
	<!-- 본사 폐기 목록 조회 -->
	<select id = "getHSDList" parameterType="hashmap" resultType="hashmap">
	SELECT CATE_NO,ITEM_NO,ITEM_NAME,TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE ,CNT,TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE,NOTE,RNUM
	FROM(
		SELECT I.CATE_NO,I.ITEM_NO,I.ITEM_NAME,HD.ENROLL_DATE,HD.CNT,HS.EXPIRY_DATE,HD.NOTE,ROW_NUMBER() OVER(ORDER BY HD.ENROLL_DATE DESC )AS RNUM
		FROM HQ_DISCARD HD INNER JOIN HQ_STOR HS
         	           ON HD.STOR_NO = HS.STOR_NO
          	          INNER JOIN ITEM I
         	           ON HS.ITEM_NO  = I.ITEM_NO
        <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND I.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND I.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != '' and cate != 7">
	<choose>
			<when test = "cate == 0">
			AND  I.CATE_NO = 0
			</when>
			<when test = "cate == 1">
			AND  I.CATE_NO = 1
			</when>
			<when test = "cate == 2">
			AND  I.CATE_NO = 2
			</when>
			<when test = "cate == 3">
			AND  I.CATE_NO = 3
			</when>
			<when test = "cate == 4">
			AND  I.CATE_NO = 4
			</when>
		</choose>
	</if>
	 <if test = "start_date != null and start_date != '' and end_date != null and end_date != ''">
			AND HD.ENROLL_DATE BETWEEN TO_DATE(#{start_date},'YYYY-MM-DD') AND TO_DATE(#{end_date},'YYYY-MM-DD')
	</if>)
	WHERE RNUM BETWEEN #{startCnt} AND #{endCnt}
	
	</select>
	
	<!-- 지점 재고리스트 행 개수 --><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	<select id ="getBSLCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
    FROM (SELECT BS.ITEM_NO, BS.EXPIRY_DATE , SUM(BS.CNT) AS ISUM              
          FROM BRCH_STOR BS   INNER JOIN ORD O
                                ON BS.ORD_NO = O.ORD_NO
                                AND O.BRCH_NO = 3
          GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE ) I LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BD.CNT) AS PSUM
                                                                    FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
                                                                                         ON BD.STOR_NO = BS.STOR_NO
                                                                                         INNER JOIN ORD O
                                                                                         ON BS.ORD_NO = O.ORD_NO
                                                                                         AND O.BRCH_NO = 3
                                                                    GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE) P
                                                ON I.ITEM_NO = P.ITEM_NO
                                                AND I.EXPIRY_DATE = P.EXPIRY_DATE
                                                                    LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BUI.CNT) AS SSUM
                                                                                        FROM BRCH_STOR BS INNER JOIN BRCH_USE_ITEM BUI
                                                                                                             ON BS.STOR_NO = BUI.STOR_NO
                                                                                                             INNER JOIN ORD O
                                                                                                             ON BS.ORD_NO = O.ORD_NO
                                                                                                             AND O.BRCH_NO = 3
                                                                                        GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE)S
                                                                       ON I.ITEM_NO = S.ITEM_NO      
                                                                         AND I.EXPIRY_DATE = S.EXPIRY_DATE
                                                                                INNER JOIN ITEM IT
                                                                                ON I.ITEM_NO = IT.ITEM_NO
    WHERE (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) > 0
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND IT.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND IT.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != '' and cate != 7">
		<choose>
			<when test = "cate == 0">
			AND  IT.CATE_NO = 0
			</when>
			<when test = "cate == 1">
			AND  IT.CATE_NO = 1
			</when>
			<when test = "cate == 2">
			AND  IT.CATE_NO = 2
			</when>
			<when test = "cate == 3">
			AND  IT.CATE_NO = 3
			</when>
			<when test = "cate == 4">
			AND  IT.CATE_NO = 4
			</when>
		</choose>
	</if>	
	</select>
	
	<!-- 지점 재고리스트 -->
	<select id = "getBSList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT CATE_NAME, ITEM_NO, ITEM_NAME, CURCNT, SAFECNT, TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE
	FROM(
	    SELECT IC.CATE_NAME, IT.ITEM_NO, IT.ITEM_NAME, (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) AS CURCNT ,NVL(ISS.SAFE_STOCK_CNT,0) AS SAFECNT, I.EXPIRY_DATE, ROW_NUMBER() OVER(ORDER BY I.EXPIRY_DATE) AS RNK
	    FROM (SELECT BS.ITEM_NO, BS.EXPIRY_DATE , SUM(BS.CNT) AS ISUM              
	          FROM BRCH_STOR BS   INNER JOIN ORD O
	                                ON BS.ORD_NO = O.ORD_NO
	                                AND O.BRCH_NO = 3
	          GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE ) I LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BD.CNT) AS PSUM
	                                                                    FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
	                                                                                         ON BD.STOR_NO = BS.STOR_NO
	                                                                                         INNER JOIN ORD O
	                                                                                         ON BS.ORD_NO = O.ORD_NO
	                                                                                         AND O.BRCH_NO = 3
	                                                                    GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE) P
	                                                ON I.ITEM_NO = P.ITEM_NO
	                                                AND I.EXPIRY_DATE = P.EXPIRY_DATE
	                                                                    LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BUI.CNT) AS SSUM
	                                                                                        FROM BRCH_STOR BS INNER JOIN BRCH_USE_ITEM BUI
	                                                                                                             ON BS.STOR_NO = BUI.STOR_NO
	                                                                                                             INNER JOIN ORD O
	                                                                                                             ON BS.ORD_NO = O.ORD_NO
	                                                                                                             AND O.BRCH_NO = 3
	                                                                                        GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE)S
	                                                                       ON I.ITEM_NO = S.ITEM_NO      
	                                                                         AND I.EXPIRY_DATE = S.EXPIRY_DATE
	                                                                                    INNER JOIN ITEM IT
	                                                                                    ON I.ITEM_NO = IT.ITEM_NO
	                                                                                    INNER JOIN ITEM_CATE IC
	                                                                                    ON IT.CATE_NO = IC.CATE_NO
	                                                                                    LEFT OUTER JOIN ITEM_SAFE_STOCK ISS
	                                                                                    ON I.ITEM_NO = ISS.ITEM_NO
	                                                                                    AND ISS.BRCH_NO = 3
   	WHERE (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) > 0 
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND IT.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND IT.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != '' and cate != 7">
		<choose>
			<when test = "cate == 0">
			AND  IT.CATE_NO = 0
			</when>
			<when test = "cate == 1">
			AND  IT.CATE_NO = 1
			</when>
			<when test = "cate == 2">
			AND  IT.CATE_NO = 2
			</when>
			<when test = "cate == 3">
			AND  IT.CATE_NO = 3
			</when>
			<when test = "cate == 4">
			AND  IT.CATE_NO = 4
			</when>
		</choose>
	</if>)  
    WHERE RNK BETWEEN #{startCnt} AND #{endCnt}
    ORDER BY EXPIRY_DATE
	</select>
	
	<!-- 지점 재고 수정 리스트 그리기 (페이징 x)  -->
	<select id = "getBSEList" parameterType="hashmap" resultType="hashmap"><!-- 지점번호 3 처리된 부분 로그인된 계정과 동일하게 수정처리 필요 -->
	SELECT CATE_NAME, ITEM_NO, ITEM_NAME, CURCNT, SAFECNT, TO_CHAR(EXPIRY_DATE,'YYYY-MM-DD') AS EXPIRY_DATE
	FROM(
	    SELECT IC.CATE_NAME, IT.ITEM_NO, IT.ITEM_NAME, (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) AS CURCNT ,NVL(ISS.SAFE_STOCK_CNT,0) AS SAFECNT, I.EXPIRY_DATE
	    FROM (SELECT BS.ITEM_NO, BS.EXPIRY_DATE , SUM(BS.CNT) AS ISUM              
	          FROM BRCH_STOR BS   INNER JOIN ORD O
	                                ON BS.ORD_NO = O.ORD_NO
	                                AND O.BRCH_NO = 3
	          GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE ) I LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BD.CNT) AS PSUM
	                                                                    FROM BRCH_DISCARD BD INNER JOIN BRCH_STOR BS
	                                                                                         ON BD.STOR_NO = BS.STOR_NO
	                                                                                         INNER JOIN ORD O
	                                                                                         ON BS.ORD_NO = O.ORD_NO
	                                                                                         AND O.BRCH_NO = 3
	                                                                    GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE) P
	                                                ON I.ITEM_NO = P.ITEM_NO
	                                                AND I.EXPIRY_DATE = P.EXPIRY_DATE
	                                                                    LEFT OUTER JOIN (SELECT BS.ITEM_NO, BS.EXPIRY_DATE, SUM(BUI.CNT) AS SSUM
	                                                                                        FROM BRCH_STOR BS INNER JOIN BRCH_USE_ITEM BUI
	                                                                                                             ON BS.STOR_NO = BUI.STOR_NO
	                                                                                                             INNER JOIN ORD O
	                                                                                                             ON BS.ORD_NO = O.ORD_NO
	                                                                                                             AND O.BRCH_NO = 3
	                                                                                        GROUP BY BS.ITEM_NO, BS.EXPIRY_DATE)S
	                                                                       ON I.ITEM_NO = S.ITEM_NO      
	                                                                         AND I.EXPIRY_DATE = S.EXPIRY_DATE
	                                                                                    INNER JOIN ITEM IT
	                                                                                    ON I.ITEM_NO = IT.ITEM_NO
	                                                                                    INNER JOIN ITEM_CATE IC
	                                                                                    ON IT.CATE_NO = IC.CATE_NO
	                                                                                    LEFT OUTER JOIN ITEM_SAFE_STOCK ISS
	                                                                                    ON I.ITEM_NO = ISS.ITEM_NO
	                                                                                    AND ISS.BRCH_NO = 3	
    WHERE (ISUM - NVL(PSUM,0) - NVL(SSUM,0)) > 0 
    <if test = "search_input != null and search_input != ''">
		<choose>
			<when test = "search_filter == 0">
			AND IT.ITEM_NO LIKE '%'|| #{search_input} ||'%'
			</when>
			<when test = "search_filter == 1">
			AND IT.ITEM_NAME LIKE '%'|| #{search_input} ||'%'
			</when>
		</choose>
	</if>
	<if test = "cate != null and cate != '' and cate != 7">
		<choose>
			<when test = "cate == 0">
			AND  IT.CATE_NO = 0
			</when>
			<when test = "cate == 1">
			AND  IT.CATE_NO = 1
			</when>
			<when test = "cate == 2">
			AND  IT.CATE_NO = 2
			</when>
			<when test = "cate == 3">
			AND  IT.CATE_NO = 3
			</when>
			<when test = "cate == 4">
			AND  IT.CATE_NO = 4
			</when>
		</choose>
	</if>)
    ORDER BY EXPIRY_DATE
	
	</select>
</mapper> 
