<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="NY">
	<!-- 공지 카테고리 목록 불러오기 -->
	<select id="getNoticeCate" resultType="hashmap">
	SELECT CATE_NO, CATE_NAME
	FROM NOTICE_CATE
	WHERE CATE_NO > 0 
	AND DEL_FLAG = 1
	ORDER BY CATE_NO		
	</select>
	
	<!-- 공지 카테고리 등록 -->
	<insert id="addNoticeCate" parameterType="hashmap">
	INSERT INTO NOTICE_CATE(CATE_NO, CATE_NAME, DEL_FLAG)
	VALUES(NOTICE_CATE_SEQ.NEXTVAL,#{inputTxt},1)
	</insert>
	
	<!-- 공지 카테고리 수정 -->
	<update id="updateNoticeCate" parameterType="hashmap">
	UPDATE NOTICE_CATE
	SET
	CATE_NAME = #{cateName}
	WHERE CATE_NO = #{cateNo}
	</update>
	
	<!-- 공지 카테고리 삭제(삭제여부 0으로 수정) -->
	<update id="deleteNoticeCate" parameterType="hashmap">
	UPDATE NOTICE_CATE
	SET
	DEL_FLAG = 0
	WHERE CATE_NO = #{cateNo}
	</update>
	
	<!-- 품목카테고리 불러오기 -->
	<select id="getItemCate"  resultType="hashmap">
	SELECT CATE_NO, CATE_NAME
	FROM ITEM_CATE
	WHERE DEL_FLAG = 1
	ORDER BY CATE_NO		
	</select>
	
	<!-- 품목 카테고리 등록 -->
	<insert id="addItemCate" parameterType="hashmap">
	INSERT INTO ITEM_CATE(CATE_NO, CATE_NAME, DEL_FLAG)
	VALUES(ITEM_CATE_SEQ.NEXTVAL,#{inputTxt},1)
	</insert>
	
	<update id="updateItemCate" parameterType="hashmap">
	UPDATE ITEM_CATE
	SET
	CATE_NAME = #{cateName}
	WHERE CATE_NO = #{cateNo}
	</update>
	
	<update id="deleteItemCate" parameterType="hashmap">
	UPDATE ITEM_CATE
	SET
	DEL_FLAG = 0
	WHERE CATE_NO = #{cateNo}
	</update>
	
	<select id="getMenuCate" resultType="hashmap">
	SELECT CATE_NO, CATE_NAME
	FROM POS_CATE
	WHERE DEL_FLAG = 1
	ORDER BY CATE_NO
	</select>
	
	<insert id="addMenuCate" parameterType="hashmap" >
	INSERT INTO POS_CATE(CATE_NO, CATE_NAME, DEL_FLAG)
	VALUES(POS_CATE_SEQ.NEXTVAL,#{inputTxt},1)
	</insert>
	
	<update id="updateMenuCate" parameterType="hashmap">
	UPDATE POS_CATE
	SET
	CATE_NAME = #{cateName}
	WHERE CATE_NO = #{cateNo}
	</update>
	
	<update id="deleteMenuCate" parameterType="hashmap">
	UPDATE POS_CATE
	SET
	DEL_FLAG = 0
	WHERE CATE_NO = #{cateNo}
	</update>
	
	<select id="getSalesList" parameterType="hashmap" resultType="hashmap">
	SELECT TO_CHAR(ENROLL_DATE,'YYYY-MM-DD') AS ENROLL_DATE, SALES_PRICE, ORD_PRICE, (SALES_PRICE - ORD_PRICE) AS NET_PRICE
	FROM (SELECT CASE WHEN O.ENROLL_DATE IS NULL THEN S.ENROLL_DATE ELSE O.ENROLL_DATE END AS ENROLL_DATE,
	               CASE WHEN SALES_PRICE IS NULL THEN 0 ELSE SALES_PRICE END AS SALES_PRICE,
	               CASE WHEN ORD_PRICE IS NULL THEN 0 ELSE ORD_PRICE END AS ORD_PRICE
	        FROM (SELECT O.ENROLL_DATE, SUM(OI.PRICE) AS ORD_PRICE
	                FROM ORD O INNER JOIN ORD_ITEM OI
	                             ON O.ORD_NO = OI.ORD_NO
	                WHERE O.STAT_CODE = 0 OR O.STAT_CODE = 2 OR O.STAT_CODE = 4
	                      OR O.STAT_CODE = 5 OR O.STAT_CODE = 6 OR O.STAT_CODE = 8
	                AND BRCH_NO = 2
	                GROUP BY O.ENROLL_DATE)O FULL OUTER JOIN 
	             (SELECT S.ENROLL_DATE, SUM(SM.CNT * PM.MENU_PRICE) AS SALES_PRICE
	                FROM SALES S INNER JOIN SALES_MENU SM
	                                ON S.SALES_NO = SM.SALES_NO
	                             INNER JOIN POS_MENU PM
	                                ON SM.MENU_NO = PM.MENU_NO
	                WHERE CNL_DATE IS NULL
	                AND BRCH_NO = 2
	                GROUP BY S.ENROLL_DATE)S ON O.ENROLL_DATE = S.ENROLL_DATE)
	<choose>
		<when test="start_date != null and start_date != '' and end_date != null and end_date != ''">
	    WHERE ENROLL_DATE BETWEEN TO_DATE(#{start_date}, 'YY/MM/DD') AND TO_DATE(#{end_date}, 'YY/MM/DD') 
		</when>
		<when test="start_date != null and start_date != '' and (end_date == null or end_date == '')">
		WHERE ENROLL_DATE <![CDATA[ >=]]> TO_DATE(#{start_date}, 'YY/MM/DD')
		</when>
		<when test="end_date != null and end_date != '' and (start_date == null or start_date == '')">
		WHERE ENROLL_DATE <![CDATA[ <=]]> TO_DATE(#{end_date}, 'YY/MM/DD')
		</when>
	</choose>
	ORDER BY ENROLL_DATE
	</select>
	
	<select id="getSalesCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*)
	FROM (SELECT CASE WHEN O.ENROLL_DATE IS NULL THEN S.ENROLL_DATE ELSE O.ENROLL_DATE END AS ENROLL_DATE,
	               CASE WHEN SALES_PRICE IS NULL THEN 0 ELSE SALES_PRICE END AS SALES_PRICE,
	               CASE WHEN ORD_PRICE IS NULL THEN 0 ELSE ORD_PRICE END AS ORD_PRICE
	        FROM (SELECT O.ENROLL_DATE, SUM(OI.PRICE) AS ORD_PRICE
	                FROM ORD O INNER JOIN ORD_ITEM OI
	                             ON O.ORD_NO = OI.ORD_NO
	                WHERE O.STAT_CODE = 0 OR O.STAT_CODE = 2 OR O.STAT_CODE = 4
	                      OR O.STAT_CODE = 5 OR O.STAT_CODE = 6 OR O.STAT_CODE = 8
	                AND BRCH_NO = 2
	                GROUP BY O.ENROLL_DATE)O FULL OUTER JOIN 
	             (SELECT S.ENROLL_DATE, SUM(SM.CNT * PM.MENU_PRICE) AS SALES_PRICE
	                FROM SALES S INNER JOIN SALES_MENU SM
	                                ON S.SALES_NO = SM.SALES_NO
	                             INNER JOIN POS_MENU PM
	                                ON SM.MENU_NO = PM.MENU_NO
	                WHERE CNL_DATE IS NULL
	                AND BRCH_NO = 2
	                GROUP BY S.ENROLL_DATE)S ON O.ENROLL_DATE = S.ENROLL_DATE)
	<choose>
		<when test="start_date != null and start_date != '' and end_date != null and end_date != ''">
	    WHERE ENROLL_DATE BETWEEN TO_DATE(#{start_date}, 'YY/MM/DD') AND TO_DATE(#{end_date}, 'YY/MM/DD') 
		</when>
		<when test="start_date != null and start_date != '' and (end_date == null or end_date == '')">
		WHERE ENROLL_DATE <![CDATA[ >=]]> TO_DATE(#{start_date}, 'YY/MM/DD')
		</when>
		<when test="end_date != null and end_date != '' and (start_date == null or start_date == '')">
		WHERE ENROLL_DATE <![CDATA[ <=]]> TO_DATE(#{end_date}, 'YY/MM/DD')
		</when>
	</choose>
	ORDER BY ENROLL_DATE
	</select>
</mapper> 
