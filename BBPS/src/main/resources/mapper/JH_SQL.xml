<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="JH"><!-- namespace: 클래스명과동일 -->
	
	<!-- 본사로그인 -->
	<select id="getHQ" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO,AUTH_NO,DEP_NO,ID,PW
		FROM HQ_USER
		WHERE ID = #{hId}
		AND PW = #{hPw}
	</select>
	
	<!-- 지점,포스로그인 -->
	<select id="getB" parameterType="hashmap" resultType="hashmap">
	SELECT B.BRCH_NO,B.ID,B.BRCH_NAME,B.MGR_NAME
	FROM BRCH B 
	WHERE ID = #{bId}
	AND PW = #{bPw}
	</select>
	
	
	<!-- 본사메뉴 -->
	<select id="getHMenu" parameterType="hashmap" resultType="hashmap">
		SELECT DISTINCT SM.SITE_MENU_NO,SM.TOP_SITE_MENU_NO as TOP,SM.SITE_MENU_NAME,
			SM.ARR_SEQ,SM.DEPTH,SMA.AUTH_CODE,A.AUTH_NO,SM.SUB_MENU_FLAG AS sub,SM.MENU_ADDR AS MADDR
		FROM SITE_MENU SM INNER JOIN SITE_MENU_AUTH SMA
                          ON SM.SITE_MENU_NO = SMA.SITE_MENU_NO
                         AND SM.SITE_MENU_NO BETWEEN 1 AND 13
                         AND SMA.AUTH_CODE IN (1,2)
                  INNER JOIN AUTH A
                          ON A.AUTH_NO = SMA.AUTH_NO
        WHERE A.AUTH_NO = #{hAuthNo}
		START WITH SM.DEPTH = #{hDt}
		CONNECT BY PRIOR SM.SITE_MENU_NO =SM.TOP_SITE_MENU_NO 
		ORDER BY SM.ARR_SEQ ASC
	</select>
	
	
	<!-- 메뉴 게시글 수 갖고오기 -->
	<select id="getMbCnt" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*) AS CNT
		FROM POS_MENU PM INNER JOIN POS_CATE PC
	                        	 ON PM.POS_CATE_NO = PC.CATE_NO
		WHERE 1 = 1 AND PM.DEL_FLAG = 1
	<if test ="search_input !=null and search_input != ''">
		<choose>
			<when test="search_Filter == 0">
				AND PM.MENU_NAME LIKE '%' || #{search_input} || '%'
			</when>
			<when test="search_Filter == 1">
				AND PC.CATE_NAME LIKE '%' || #{search_input} || '%'
			</when>
			<when test="search_Filter == 2">
				AND PM.MENU_PRICE LIKE '%' || #{search_input} || '%'
			</when>
		</choose>
	</if>
	<if test = "cateNo != null and cateNo != ''">
		<choose>
			<when  test ="cateNo == 0">
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 1" >
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 2">
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 3">
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 4">
				AND  CATE_NO IN (0,1,2,3)
			</when>
		</choose>
	</if>
	</select>
	
	<!-- 메뉴 게시글 갖고오기 -->
	<select id="getMbList" parameterType="hashmap" resultType="hashmap">
		SELECT P.MENU_NO,P.MENU_NAME,P.CNAME,P.MENU_PRICE,P.POS_CATE_NO,P.NOTE,P.MENU_IMG
		FROM (SELECT PM.MENU_NO,PM.MENU_NAME,PM.POS_CATE_NO,PM.MENU_PRICE,PM.MENU_IMG,PC.CATE_NAME as CNAME,PM.NOTE,
		             ROW_NUMBER() OVER( ORDER BY MENU_NO ASC) AS RNUM
		      FROM POS_MENU PM INNER JOIN POS_CATE PC
		                                 ON PM.POS_CATE_NO = PC.CATE_NO
		WHERE 1=1 
		AND PM.DEL_FLAG = 1
	<if test ="search_input !=null and search_input != ''">
		<choose>
			<when test="search_Filter == 0">
				AND PM.MENU_NAME LIKE '%' || #{search_input} || '%'
			</when>
			<when test="search_Filter == 1">
				AND PC.CATE_NAME LIKE'%' || #{search_input} || '%'
			</when>
			<when test="search_Filter == 2">
				AND PM.MENU_PRICE LIKE '%' || #{search_input} || '%'
			</when>
		</choose>
	</if>
	<if test = "cateNo != null and cateNo != ''">
		<choose>
			<when  test ="cateNo == 0">
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 1" >
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 2">
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 3">
				AND  CATE_NO = #{cateNo}
			</when>
			<when  test ="cateNo == 4">
				AND  CATE_NO IN (0,1,2,3)
			</when>
		</choose>
	</if>
	   ) P
	   WHERE P.RNUM BETWEEN #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 상세보기 -->
	<select id="getMd" parameterType="hashmap" resultType="hashmap">
	SELECT  PM.MENU_NO AS MNO, PM.MENU_NAME AS MNAME, PC.CATE_NAME AS CNAME, PM.MENU_PRICE AS MPRICE, PM.MENU_IMG AS MIMG, PM.NOTE
	FROM POS_MENU PM INNER JOIN POS_CATE PC
                         ON PM.POS_CATE_NO = PC.CATE_NO
	WHERE PM.MENU_NO = #{posMenuNo}	
	</select>
	
	<!-- 수정 -->
	<update id="editM" parameterType="hashmap">
		UPDATE POS_MENU SET MENU_NAME = #{m_name}, MENU_PRICE = #{m_price}, MENU_IMG = #{m_file}, NOTE = #{m_note}
		WHERE MENU_NO = #{posMenuNo}
	</update>
	
	<!-- 등록  -->
	<insert id="addM" parameterType="hashmap">
		INSERT INTO POS_MENU (MENU_NO,MENU_NAME,POS_CATE_NO,USER_NO,MENU_PRICE,MENU_IMG,NOTE)
		VALUES (POS_MENU_SEQ.NEXTVAL,#{m_name},#{m_cate},#{userNo},#{m_price},#{m_file},#{m_Note})
	</insert>
	
	<!-- 수정 -->
	<update id="delM" parameterType="hashmap">
		UPDATE POS_MENU SET DEL_FLAG = 0
		WHERE MENU_NO = #{posMenuNo}
	</update>
	
	<!-- 지점메뉴 -->
	<select id="getBMenu" parameterType="hashmap" resultType="hashmap">
		SELECT DISTINCT SM.SITE_MENU_NO,SM.TOP_SITE_MENU_NO AS TOP,SM.SITE_MENU_NAME,SM.ARR_SEQ,SM.DEPTH,SMA.AUTH_CODE,A.AUTH_NO,SM.SUB_MENU_FLAG as sub,SM.MENU_ADDR AS MADDR
		FROM SITE_MENU SM INNER JOIN SITE_MENU_AUTH SMA
		                          ON SM.SITE_MENU_NO = SMA.SITE_MENU_NO
		                         AND SM.SITE_MENU_NO BETWEEN 14 AND 24
		                         AND SMA.AUTH_CODE IN (1,2)
		                  INNER JOIN AUTH A
		                          ON A.AUTH_NO = SMA.AUTH_NO
        WHERE A.AUTH_NO = 6
		START WITH SM.DEPTH = #{bDt}
		CONNECT BY PRIOR SM.SITE_MENU_NO =SM.TOP_SITE_MENU_NO 
		ORDER BY SM.SITE_MENU_NO ASC
	</select>
	
	<!--포스 갖고오기 -->
	<select id="getPMenu" parameterType="hashmap" resultType="hashmap">
		SELECT M.MNO,M.CNO,M.MNAME,M.MIMG,M.MPRICE
		FROM (SELECT MENU_NO AS MNO,POS_CATE_NO AS CNO, MENU_NAME AS MNAME,MENU_IMG AS MIMG, MENU_PRICE AS MPRICE,
                ROW_NUMBER() OVER ( ORDER BY MENU_NO DESC)
     		  FROM POS_MENU
      	WHERE 1 = 1 
      	AND DEL_FLAG = 1
	<if test ="cateNo !=null and cateNo != ''">
		<choose>
			<when test="cateNo == 0">
				AND POS_CATE_NO =  #{cateNo}
			</when>
			<when test="cateNo == 1">
				AND  POS_CATE_NO =  #{cateNo}
			</when>
			<when test="cateNo == 2">
				AND POS_CATE_NO  =  #{cateNo}
			</when>
			<when test="cateNo == 3">
				AND POS_CATE_NO =  #{cateNo}
			</when>
		</choose>
	</if>
     	) M
	</select>
	
	<!-- 오더메뉴 -->
	<select id="getMOrd" parameterType="hashmap" resultType="hashmap">
		SELECT  PM.MENU_NO AS MNO, PM.MENU_NAME AS MNAME, PC.CATE_NAME AS CNAME, PM.MENU_PRICE AS MPRICE, PM.MENU_IMG AS MIMG,PC.CATE_NO AS CNO
		FROM POS_MENU PM INNER JOIN POS_CATE PC
	                         ON PM.POS_CATE_NO = PC.CATE_NO
		WHERE PM.MENU_NO = #{mNo}
	</select>
	
	
	<!-- 주문 금액 넣기 -->
	<insert id="addSales" parameterType="hashmap">
		INSERT INTO SALES(SALES_NO,BRCH_NO,PAY_METHOD)
		VALUES (#{ordNo},#{brchNo},#{methodNo})
	</insert>
	
	
	<!-- 주문 메뉴 넣기 -->
	<insert id="addOrd" parameterType="hashmap">
		INSERT INTO SALES_MENU(SALES_NO,MENU_NO,CNT)
		VALUES (#{ordNo}, #{menuNo}, #{oMCnt})
	</insert>
	
	<!-- 주문번호 -->
	<select id="getOrdNum" parameterType="hashmap" resultType="hashmap">
		SELECT  TO_CHAR(SYSDATE, 'YYMMDD') || SALES_MENU_SEQ.NEXTVAL AS SNO
		FROM DUAL
	</select>
	
	<!-- 본사 마이페이지 -->
	<select id="getHUser" parameterType="hashmap" resultType="hashmap">
		SELECT HU.USER_NO AS UNO,HD.DEP_NAME AS DNM, ID, HU.PW, USER_NAME AS UNM, HU.PHONE_NUM AS PNUM, TO_CHAR(HU.ENROLL_DATE, 'YY-MM-DD') AS ENROLL
		FROM HQ_USER HU INNER JOIN HQ_DEP HD
                     			ON HU.DEP_NO = HD.DEP_NO
		WHERE USER_NO = #{uNo}
	</select>
	
	<!-- 비밀번호 체크 -->
	<select id="getHPw" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO,AUTH_NO,DEP_NO,ID,PW
		FROM HQ_USER
		WHERE USER_NO = ${sUSERNo}
		AND PW = #{hPw}
	</select>
	
	<!-- 본사마이페이지 수정 -->
	<update id="editHU" parameterType="hashmap">
		UPDATE HQ_USER SET PW = #{mPw}, USER_NAME = #{mNm}, PHONE_NUM = #{mPNum}
		WHERE USER_NO = #{uNo}
	</update>
	
	<!-- 지점 마이페이지 -->
	<select id="getBUser" parameterType="hashmap" resultType="hashmap">
		SELECT BRCH_NO AS BNO, ID, PW, BRCH_NAME AS BNM, POST_NUM AS PNUM, DFT_ADDRESS AS DFADDR, DTL_ADDRESS AS DTADDR, CALL_NUM AS CNUM, MGR_NAME AS MNM, MGR_PHONE_NUM AS MGPNUM
		FROM BRCH
		WHERE BRCH_NO = #{brchNo}
	</select>
	
	<!-- 비밀번호 체크 -->
	<select id="getBPw" parameterType="hashmap" resultType="hashmap">
		SELECT BRCH_NO AS BNO, ID, BRCH_NAME AS BNM,PW
		FROM BRCH
		WHERE BRCH_NO = #{brchNo}
		AND PW = #{bPw}
	</select>
	
	<!-- 지점마이페이지 수정 -->
	<update id="editBU" parameterType="hashmap">
		UPDATE BRCH SET PW = #{bPw}, POST_NUM = #{pNum}, DFT_ADDRESS = #{bAddr}, DTL_ADDRESS = #{dtlAddr}, CALL_NUM = #{brchCNum},
                        MGR_NAME = #{mNm}, MGR_PHONE_NUM = #{mPNum}
		WHERE BRCH_NO = #{brchNo}
	</update>
	
		<!-- 포스 환불 리스트 수  -->
	<select id="getRCnt" parameterType="hashmap" resultType="Integer">
	SELECT COUNT(*) AS CNT
	FROM (SELECT S2.SDATE,B.BRCH_NAME AS BNM,BS.ENROLL_DATE,
               ROW_NUMBER() OVER(ORDER BY S2.SDATE DESC) AS RNUM
    	  FROM (SELECT TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD') AS SDATE,COUNT(TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD')) AS SALES_CNT,S.BRCH_NO
        	    FROM SALES  S   
            	WHERE S.CNL_DATE IS NULL
            	GROUP BY TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD'), S.BRCH_NO) S2 INNER JOIN BRCH B 
                                                                              ON S2.BRCH_NO = B.BRCH_NO
                                                                              AND B.BRCH_NO = #{brchNo}
                                                                      INNER JOIN BRCH_STOR BS
                                                                              ON S2.BRCH_NO = BS.STOR_NO
 		
 		<choose>
				<when test="startDate != null and startDate != '' and endDate != null and endDate != ''">
			  	 	 WHERE S2.SDATE BETWEEN TO_DATE(#{startDate}, 'YY/MM/DD') AND TO_DATE(#{endDate},'YY/MM/DD') 
				</when>
				<when test="startDate != null and startDate != ''">
			  	 	 WHERE S2.SDATE &gt;= TO_DATE(#{startDate}, 'YY/MM/DD')
				</when>
				<when test="endDate != null and endDate != ''">
			  	 	 WHERE S2.SDATE  &lt;= TO_DATE(#{endDate},'YY/MM/DD') 
				</when>
		</choose>
	     	) R
		ORDER BY R.RNUM ASC
	</select>
	<!-- 포스 환불 리스트   -->
	<select id="getRList" parameterType="hashmap" resultType="hashmap">
		SELECT R.SDATE, R.BNM
		FROM (SELECT S2.SDATE,B.BRCH_NAME AS BNM,BS.ENROLL_DATE,
               ROW_NUMBER() OVER(ORDER BY S2.SDATE DESC) AS RNUM
     		  FROM (SELECT TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD') AS SDATE,COUNT(TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD')) AS SALES_CNT,S.BRCH_NO
            	    FROM SALES  S   
            	    WHERE S.CNL_DATE IS NULL
              GROUP BY TO_CHAR(S.ENROLL_DATE,'YYYY-MM-DD'), S.BRCH_NO) S2 INNER JOIN BRCH B 
                                                                              ON S2.BRCH_NO = B.BRCH_NO
                                                                              AND B.BRCH_NO = #{brchNo}
                                                                      INNER JOIN BRCH_STOR BS
                                                                              ON S2.BRCH_NO = BS.STOR_NO
 		<choose>
				<when test="startDate != null and startDate != '' and endDate != null and endDate != ''">
			  	 	 WHERE S2.SDATE BETWEEN TO_DATE(#{startDate}, 'YY/MM/DD') AND TO_DATE(#{endDate},'YY/MM/DD') 
				</when>
				<when test="startDate != null and startDate != ''">
			  	 	 WHERE S2.SDATE &gt;= TO_DATE(#{startDate}, 'YY/MM/DD')
				</when>
				<when test="endDate != null and endDate != ''">
			  	 	WHERE S2.SDATE  &lt;= TO_DATE(#{endDate},'YY/MM/DD')
				</when>
		</choose>
	   	) R
	   	WHERE R.RNUM BETWEEN #{startCnt} AND #{endCnt}
		ORDER BY R.RNUM ASC
	</select>
</mapper> 